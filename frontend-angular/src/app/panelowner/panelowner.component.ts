import { typeWithParameters } from '@angular/compiler/src/render3/util';
import { Component, OnInit, ViewChild } from '@angular/core';
import { SmcService } from '../smc.service';
import { default as Web3} from 'web3';
import { ChartDataSets, ChartOptions } from 'chart.js';
import { Color, Label, BaseChartDirective } from 'ng2-charts';
import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';


@Component({
  selector: 'app-panelowner',
  templateUrl: './panelowner.component.html',
  styleUrls: ['./panelowner.component.css']
})
export class PanelownerComponent implements OnInit {
  private web3:Web3;
  moneygenerated = false;
  elecgenerated = false;
  public panel = {ownerAddr:"",panelid:""};
  _panelfinance : any;
  _panelid:any;
  _panelid2:any;
  _panelwatts:any;
  _chartdata=[500000,500000,500000,500000,500000];
  _updatedchartdata=[];

  public lineChartData: ChartDataSets[] = [
    { data: this._chartdata, label: 'Electricity Generated by My Solar Panel' },
  ];
  public lineChartData2: ChartDataSets[] = [
    { data: this._updatedchartdata, label: 'Electricity Generated by My Solar Panel' },
  ];
  public lineChartLabels: Label[] = ['Season1', 'Season2', 'Season3', 'Season4','Season5'];
  public lineChartOptions: (ChartOptions & { annotation: any }) = {
    annotation: true,
    responsive: true,
  };
  public lineChartColors: Color[] = [
    {
      borderColor: 'black',
      backgroundColor: 'rgba(137, 196, 244, 0.3)',
    },
  ];
  public lineChartLegend = true;
  public lineChartType = 'line';
  public lineChartPlugins = [];

  @ViewChild(BaseChartDirective, { static: true }) chart: BaseChartDirective;

  constructor(private _smcService:SmcService) { }

  ngOnInit(){
  }

  onMoneyGen(){     
    let that = this;
    this._panelfinance=this._smcService.checkPanelStatus(this.panel.panelid).then(function(data){
      if(that.panel.ownerAddr == data.ownerAddress){
        that.moneygenerated=true;
        that._panelid=that.panel.panelid;
        that._panelfinance=data.balance;
        }
      else{
        that.moneygenerated=false;
        alert("False Owner Address!");
      }
    })
  }

  onElecGen(){
    let that = this;
    this._panelfinance=this._smcService.checkPanelWatts(this.panel.panelid).then(function(data){
        that.elecgenerated=true;
        that._panelid2=that.panel.panelid;
        that._panelwatts=data;
        // that._chartdata=[];
        //Array.prototype.push.apply(that._chartdata,+data);
        // that.chart.update();
        for ( let i of data){
          that._updatedchartdata.push(+i)
        };
        //that.chart.update();
        //console.log(that._chartdata,data);
      }
    )
  }

  public chartClicked({ event, active }: { event: MouseEvent, active: {}[] }): void {
    console.log(event, active);
  }

}

//0x01264f571e048c93Dd2A9A04d7FB040255B4e229 (100 ETH)
//0xC5B30fc89197418F02fC5b8A6603e3e44aE5c3Df
// mypanel.regNo,
//       mypanel.manufct,
//       mypanel.manufctAddr,
//       mypanel.ownerAddr,

//  onRegisterPanel(mypanel){
//   if(mypanel){
//     this._smcService.addPanel(mypanel).then(() =>{
//       this.mypanel={};
//     });
//   }
// }